version: "3.0"

services:


  # ELK Stack Config
  # elasticsearch:
  #   env_file: env
  #   build:
  #     context: ../elasticsearch/
  #     args:
  #       ELK_VERSION: 6.4.0
  #   volumes:
  #     - ../elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks:
  #     - elk

  # logstash:
  #   env_file: env
  #   build:
  #     context: ../logstash/
  #     args:
  #       ELK_VERSION: 6.4.0
  #   volumes:
  #     -  ../logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
  #     -  ../logstash/pipeline:/usr/share/logstash/pipeline:ro
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks:
  #     - elk
  #   depends_on:
  #     - elasticsearch

  # kibana:
    # env_file: env
    # build:
    #   context: ../kibana/
    #   args:
    #     ELK_VERSION: 6.4.0
    # volumes:
    #   -  ../kibana/config/:/usr/share/kibana/config:ro
    # ports:
    #   - "5601:5601"
    # networks:
    #   - elk
    # depends_on:
    #   - elasticsearch

  # Kafka
  kafka:
    image: landoop/fast-data-dev
    expose:
      - "3030"
      - "9092"
      - "8081"
      - "8082"
      - "8083"
      - "2181"
    ports:
      - "3030:3030"
      - "9092:9092"
      - "9081:8081"
      - "9082:8082"
      - "9083:8083"
      - "2181:2181"
    labels:
      - "traefik.enable=true"   
      - "traefik.fastdata.backend=fastdata"
      - "traefik.fastdata.port=3030"
      - "traefik.kafkabroker.backend=kafkabroker"
      - "traefik.kafkabroker.port=9092"
      - "traefik.schemaregistry.backend=schemaregistry"
      - "traefik.schemaregistry.port=9081"
      - "traefik.kafkarest.backend=kafkarest"
      - "traefik.kafkarest.port=9082"
      - "traefik.kafkaconnect.backend=kafkaconnect"
      - "traefik.kafkaconnect.port=9083"
      - "traefik.zookeeper.backend=zookeeper"
      - "traefik.zookeeper.port=2181"

  # prometheus 
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    labels:
      - "traefik.enable=true"   
      - "traefik.backend=prometheus"
      - "traefik.port=9090"

  # jaeger components
  jaeger-collector:
    image: jaegertracing/jaeger-collector
    command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra", "--collector.zipkin.http-port=9411"]
    ports:
      - "14269"
      - "14268:14268"
      - "14267"
      - "9411:9411"
    restart: on-failure
    depends_on:
      - cassandra-schema

  jaeger-query:
    image: jaegertracing/jaeger-query
    command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra"]
    ports:
      - "16686:16686"
      - "16687"
    restart: on-failure
    depends_on:
      - cassandra-schema

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    command: ["--collector.host-port=jaeger-collector:14267"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    restart: on-failure
    depends_on:
      - jaeger-collector

  cassandra:
    image: cassandra:3.9

  cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema
    depends_on:
      - cassandra

  # E2E Testing (API)
  api-tests:
    build:
      context: ../..
    image: node:10-alpine
    expose:
      - "3080"
    ports:
      - "3080:3080"
    env_file: env
    environment:
      LOGLEVEL: debug
      PORT: 3080

    working_dir: /services
    volumes:
      - ../..:/services

    command: /bin/sh -c "npm install && npm run api-tests"
  
    links:
      - api
    depends_on:
      - api

    labels:
      - "traefik.enable=true"  
      - "traefik.port=3080"
      - "traefik.backend=api-tests"
      - "traefik.frontend.entryPoints=http"
      - "traefik.frontend.rule=PathPrefix:/"

  # Load Testing

  
  # Moleculer Config
  api:
    build:
      context: ./../..
    image: node:10-alpine
    expose:
      - "3050"
    ports:
      - "3050:3050"
    env_file: env
    environment:
      LOGLEVEL: debug
      PORT: 3050
      PROMETHEUS_PORT: 3060

    working_dir: /src
    volumes:
      - ../..:/src

    command: /bin/sh -c "npm install && npm run start-api"
    
    links:
      - nats
      - mongo
      - redis
      - jaeger-collector
    depends_on:
      - nats
      - mongo
      - redis
      - jaeger-collector
    labels:
      - "traefik.enable=true"   
      - "traefik.backend=api"
      - "traefik.port=3050"
      - traefik.backend.healthcheck.path=/~node/health

  core:
    build:
      context: ./../..
    image: node:10-alpine
    ports:
      - "3060:3060"
    env_file: env
    environment:
      LOGLEVEL: debug
      PROMETHEUS_PORT: 3060

    working_dir: /src
    volumes:
      - ../..:/src

    command: /bin/sh -c "npm install && npm run start-core"
    
    links:
      - jaeger-collector
      - nats
      - mongo
      - redis
      - kafka
    depends_on:
      - jaeger-collector
      - nats
      - mongo
      - redis
      - kafka
    labels:
      - "traefik.enable=false"
  
  redis:
    image: redis:alpine

  mongo:
    image: mongo

  nats:
    image: nats

  traefik:
    image: traefik
    command: --web --docker --docker.domain=docker.localhost --logLevel=INFO --docker.exposedbydefault=false
    ports:
      - "3001:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml

networks:
  elk:
    driver: bridge